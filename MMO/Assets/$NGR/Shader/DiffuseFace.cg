#ifndef MRT
#define MRT 0
#endif


#include "UnityCG.cginc"
#include "LightCommon.cg"
struct appdata
{
	float4 vertex : POSITION;
	float3 normal:NORMAL;
	float2 uv : TEXCOORD0;
};



sampler2D _MainTex;
sampler2D _EyeTex;
sampler2D _MouseTex;

float4 _MainTex_ST;

float4 _LeftEyeTex_Src;
float4 _RightEyeTex_Src;
float4 _MouseTex_Src;

float4 _LeftEyeTex_ST_Dest;
//float4 _RightEyeTex_ST_Dest;
float4 _Color;
float4 _MouseTex_ST_Dest;
float _SmoothBase;
float _Metal;

float4 SampleTex(sampler2D tex, float4 area,float2 uv,float4 dstarea)
{
	if (uv.x<area.x || uv.x > area.x + area.z || uv.y<area.y || uv.y>area.y + area.w)
	{
		return 0;
	}
	else
	{
		float2 real_uv = (uv - area.xy) / area.zw;
		float2 dst_uv = real_uv*dstarea.zw + dstarea.xy;
		return tex2D(tex, dst_uv);
		//return float4(real_uv.xy,0,1);
	}
}
float4 SampleRightTex(sampler2D tex, float4 area, float2 uv, float4 dstarea)
{
	if (uv.x<area.x || uv.x > area.x + area.z || uv.y<area.y || uv.y>area.y + area.w)
	{
		return 0;
	}
	else
	{
		float2 real_uv = (uv - area.xy) / area.zw;
		real_uv.x = 1 - real_uv.x;
		float2 dst_uv = real_uv*dstarea.zw + dstarea.xy;
		return tex2D(tex, dst_uv);
		//return float4(real_uv.xy,0,1);
	}
}

struct v2f
{
	float2 uv			: TEXCOORD0;
	#if MRT == 1
	float4 depth_normal	: TEXCOORD1;
	#endif
	float4 vertex		: SV_POSITION;
};

v2f vert (appdata v)
{
	v2f o;
	o.vertex = mul(UNITY_MATRIX_MVP, v.vertex);
	o.uv = TRANSFORM_TEX(v.uv, _MainTex);
	#if MRT == 1
	float3 viewpos = mul(UNITY_MATRIX_MV, v.vertex);
	o.depth_normal.xyz = mul((float3x3)UNITY_MATRIX_MV, v.normal.xyz);
	o.depth_normal.w	=	-viewpos.z*_ProjectionParams.w;
	#endif
	return o;
}
struct PS_OUTPUT
{
	float4 diffuse_roughness	: COLOR0;
#if MRT == 1
	float4 depth_normal			: COLOR1;
#endif
};


PS_OUTPUT frag (v2f i)
{
	PS_OUTPUT ret;
	// sample the texture
	float4 col = pow(tex2D(_MainTex, i.uv),2.2f);
	
	float2 fixed_uv = i.uv;
	
	float4	left = SampleTex(_EyeTex, _LeftEyeTex_Src, fixed_uv, _LeftEyeTex_ST_Dest);
	float4	right = SampleRightTex(_EyeTex, _RightEyeTex_Src, fixed_uv, _LeftEyeTex_ST_Dest);
	float4	mouse = SampleTex(_MouseTex, _MouseTex_Src, fixed_uv, _MouseTex_ST_Dest);
	float3 dst = lerp(col.xyz, pow(left.xyz,2.2f), left.w);
	dst = lerp(dst.xyz, pow(right.xyz, 2.2f), right.w);
	dst = lerp(dst.xyz, pow(mouse.xyz,2.2f), mouse.w);
	// apply fog
	//UNITY_APPLY_FOG(i.fogCoord, col);

	
	ret.diffuse_roughness	=	fixed4(dst.xyz*_Color*2,_SmoothBase*0.497f);
	ret.diffuse_roughness.w =_SmoothBase*0.495f;
	if(_Metal>0.5f)
	{
		ret.diffuse_roughness.w +=0.5f;
	}
	#if MRT == 1
	ret.depth_normal.xy =  EncodeDepth(i.depth_normal.w);
	ret.depth_normal.zw =  EncodeNormal(normalize(i.depth_normal.xyz));
	#endif
	return ret;
}