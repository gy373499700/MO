// Upgrade NOTE: replaced 'mul(UNITY_MATRIX_MVP,*)' with 'UnityObjectToClipPos(*)'

// Upgrade NOTE: replaced '_Object2World' with 'unity_ObjectToWorld'


#ifndef T4M_AO
#define T4M_AO 0
#endif
//#ifndef T4M_NORMAL
//#define T4M_NORMAL 0
//#endif

#ifndef T4M_WETNESS
#define T4M_WETNESS 0
#endif

#ifndef DEBUG_AO
#define DEBUG_AO 0
#endif

#ifndef USE_SHADOW
#define USE_SHADOW 1
#endif

#ifndef USE_FOG
#define USE_FOG 1
#endif

#include "UnityCG.cginc"
#include "LightCommon.cg"
sampler2D _Control;
#if T4M_AO == 1
sampler2D _ColorControl;
#elif T4M_AO == 2
sampler2D _ColorControl;
#endif
sampler2D _Splat0,_Splat1,_Splat2,_Splat3;
float4 _Control_ST;
float4 _Splat0_ST;
float4 _Splat1_ST;
float4 _Splat2_ST;
float4 _Splat3_ST;

#if T4M_NORMAL == 1
sampler2D _Normal0,_Normal1,_Normal2,_Normal3;
float4 _Color0,_Color1,_Color2,_Color3;
#endif

float4 _WorldUpInViewSpace;

float4		_Color;
float		_SmoothBase;
float		_Metal;
float4		_AAOffset;

sampler2D _ShadowDepth;
float4 invShadowViewport;
float4x4 _ShadowView;
float4x4 _ShadowProj;

float4 MainColor;
float4 MainDir;
float4 AmbientColor;
float4 FogColor;
float4 FogParam;

fixed4 TerrainColor(float2 uv,float4 uv01,float4 uv23,fixed4 splat_control)
{

	fixed4 lay1 = pow(tex2D(_Splat0, uv01.xy), 2.2f);
	fixed4 lay2 = pow(tex2D(_Splat1, uv01.zw), 2.2f);
	fixed4 lay3 = pow(tex2D(_Splat2, uv23.xy), 2.2f);
	fixed4 lay4 = pow(tex2D(_Splat3, uv23.zw), 2.2f);

	fixed4 ret= (lay1 * splat_control.r + lay2 * splat_control.g + lay3 * splat_control.b + lay4 * max(0,1-dot(splat_control.xyz,1)));
	
	#if T4M_NORMAL == 0
	ret.w = 0;
	#endif
	return ret;
}



struct mrt_v2f {
			float4 pos 			: SV_POSITION;
			float4 uv 			: TEXCOORD0;
			float4 uv_01		: TEXCOORD1;
			float4 uv_23		: TEXCOORD2;
			float4 normal		: TEXCOORD3;
			float4 wpos			: TEXCOORD4;
			float4 sview        : TEXCOORD5;

		};

mrt_v2f mrt_vert(appdata_full v)
		{
			mrt_v2f o;

			o.pos = UnityObjectToClipPos(v.vertex);


			o.pos.xy += _AAOffset.xy*o.pos.w;

			o.uv.xy = TRANSFORM_TEX(v.texcoord, _Control);

			o.uv_01.xy = TRANSFORM_TEX(v.texcoord, _Splat0);
			o.uv_01.zw = TRANSFORM_TEX(v.texcoord, _Splat1);
			o.uv_23.xy = TRANSFORM_TEX(v.texcoord, _Splat2);
			o.uv_23.zw = TRANSFORM_TEX(v.texcoord, _Splat3);


			o.normal.xyz = mul((float3x3)unity_ObjectToWorld, v.normal.xyz);
			o.wpos =  mul(unity_ObjectToWorld, v.vertex);

			float3 view_dir	=	normalize(o.wpos.xyz-_WorldSpaceCameraPos.xyz);
			o.normal.w = view_dir.z;
			o.uv.zw	=	view_dir.xy;

			o.sview = mul(_ShadowView,o.wpos+float4(o.normal.xyz*0.07f,0));
			

			return o;
		}



float4 mrt_frag(mrt_v2f i):COLOR0
{

	float3 P = i.wpos.xyz;
	float3 N = normalize(i.normal.xyz);
	float3 E = normalize(float3(i.uv.zw,i.normal.w));
	float3 L = MainDir.xyz;

	float3 ao=1;
	fixed4 splat_control = tex2D(_Control, i.uv).rgba;
	fixed4 Diff = TerrainColor(i.uv, i.uv_01,i.uv_23,splat_control);
#if T4M_AO == 1
	fixed3 color_control =  tex2D(_ColorControl,i.uv.xy).rgb;
	ao.xyz =color_control.xyz*2.0f;
#elif T4M_AO == 2
	fixed3 color_control =  tex2D(_ColorControl,i.uv.xy).rgb;
	ao.xyz=color_control.x*2.0f;
#endif
	Diff.xyz *= ao.xyz*_Color.xyz*2.0f;


	float shadow_z = i.sview.z;
		float4 shadowproj = mul(_ShadowProj,i.sview);
		shadowproj/=shadowproj.w;
		if(abs(shadowproj.x)>1.0f || abs(shadowproj.y)>1.0f )
		{
			shadow_z = 0.0f;
		}

		#if SHADER_API_GLES|| SHADER_API_GLES3

		#else
			shadowproj.y*=-1;
		#endif



	#if USE_SHADOW == 1
	float2 shadowuv = shadowproj.xy*0.5+0.5;
	float2 XY_DEPTH = float2(1.0f,0.003921568627451)*invShadowViewport.w;
	float2 shadow_depth=0;
	shadow_depth.x = dot(tex2D(_ShadowDepth,shadowuv).xy,XY_DEPTH);
	shadow_depth.y = dot(tex2D(_ShadowDepth,shadowuv+float2(0,invShadowViewport.y)).xy,XY_DEPTH);
	shadow_depth-=shadow_z;
	shadow_depth = shadow_depth>0;
	float lerp_val = frac(shadowuv.y/invShadowViewport.x);

	float4 light = lerp(shadow_depth.x, shadow_depth.y, lerp_val)*MainColor*saturate(dot(-L,N))*0.75f;
	#else
	float4 light = MainColor*saturate(dot(-L,N))*0.75f;
	#endif
	float4 ambient = (N.y*0.25+0.25f)*AmbientColor;

	#if USE_FOG == 1
	float dis = pow(saturate((length(P-_WorldSpaceCameraPos.xyz)-FogParam.x)/FogParam.y),FogParam.z);
	return lerp((light+ambient)*Diff,FogColor,dis);
	#else
	float4 retValue = (light + ambient) * Diff;
	retValue.w = 0;
	return retValue;
	#endif
}
