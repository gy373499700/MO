			
			#define PI 3.14159265f
			#define MaterialFloat float
			float Square( float x )
			{
				return x*x;
			}
			MaterialFloat ClampedPow(MaterialFloat X,MaterialFloat Y)
			{
				return pow(max(abs(X),0.000001f),Y);
			}
			MaterialFloat PhongShadingPow(MaterialFloat X, MaterialFloat Y)
			{
				return ClampedPow(X, Y);
			}
			// [Blinn 1977, "Models of light reflection for computer synthesized pictures"]
			float D_Blinn( float Roughness, float NoH )
			{
				float m = Roughness * Roughness;
				float m2 = m * m;
				float n = 2 / m2 - 2;
				return (n+2)/ 2 * PhongShadingPow( NoH, n );		// 1 mad, 1 exp, 1 mul, 1 log
			}
			// Anisotropic GGX
			// [Burley 2012, "Physically-Based Shading at Disney"] can divide PI
			float D_GGXaniso( float RoughnessX, float RoughnessY, float3 N, float3 H, float4 tangent,float Roughness)
			{//各向异性指的是在不同方向光照效果产生的差异//disney效果更好
				float3 X = tangent;
				float3 Y = cross( normalize(N), normalize(tangent.xyz) ) * tangent.w;//binormal
				float NoH = saturate( dot(N, H) );
				float mx = RoughnessX * RoughnessX;
				float my = RoughnessY * RoughnessY;
				float XoH = dot( X, H );
				float YoH = dot( Y, H );
				float d = XoH*XoH / (mx*mx) + YoH*YoH / (my*my) + NoH*NoH;
				return Roughness / ( mx*my * d*d );//from disney论文
			}
			float D_ward( float RoughnessX, float RoughnessY, float3 N, float3 H, float4 tangent,float i,float Roughness)
			{//效果不好 
				float3 X = tangent;
				float3 Y = cross( normalize(N), normalize(tangent.xyz) ) * tangent.w;//binormal
				float NoH = saturate( dot(N, H) );
				float mx = RoughnessX * RoughnessX;
				float my = RoughnessY * RoughnessY;
				float XoH = dot( X, H );
				float YoH = dot( Y, H );
				float O=reflect(-i,N);
				float d = (XoH*XoH / (mx*mx) + YoH*YoH / (my*my)) /(NoH*NoH);
				float t=Roughness;///(mx*my*sqrt(dot(i,N)*dot(O,N)));
				return exp(-d)/t;//from note on ward brdf论文
			}
			// [Beckmann 1963, "The scattering of electromagnetic waves from rough surfaces"]
			float D_Beckmann( float Roughness, float NoH )
			{
				float m = Roughness * Roughness;
				float m2 = m * m;
				float NoH2 = NoH * NoH;
				return exp( (NoH2 - 1) / (m2 * NoH2) ) / ( m2 * NoH2 * NoH2 );
			}
			// [Burley 2012, "Physically-Based Shading at Disney"]

			half3 Diffuse_Lambert( half3 DiffuseColor )
			{
				return DiffuseColor / PI;
			}
			half3 SimplePointLightDiffuse( half3 DiffuseColor ,float inRoughness,float Metal,float3 L,float3 N)
			{//metal control diffuse
				float fn = inRoughness*inRoughness;
				float f0   =   (1-fn)/(1+fn);
		
				return Diffuse_Lambert(DiffuseColor)*(dot(L, N)*0.5 + 0.5)*(saturate(2 - f0*f0-Metal));
			}
			half3 SimplePointLightDiffuse( half3 DiffuseColor ,float inRoughness,float3 L,float3 N)
			{
				float fn = inRoughness*inRoughness;
				float f0   =   (1-fn)/(1+fn);
				return Diffuse_Lambert(DiffuseColor)*(dot(L, N)*0.5 + 0.5) *saturate(1 - f0*f0);
			}
			float chiGGX(float v)
			{
			    return v > 0 ? 1 : 0;
			}

			float D_GGX_Distribution(float Roughness,float NoH)
			{//this is the same  with D_GGX,公式也完全一样
				float alpha=Roughness*Roughness;
			    float alpha2 = alpha * alpha;
			    float NoH2 = NoH * NoH;
			    float den = NoH2 * alpha2 + (1 - NoH2);
			    return (chiGGX(NoH) * alpha2) / ( PI * den * den );
			}
			float G_GGX_PartialGeometryTerm(float3 v, float3 n, float3 h, float Roughness)
			{
				float alpha=Roughness*Roughness;
			    float VoH = saturate(dot(v,h));
			    float chi = chiGGX( VoH / saturate(dot(v,n)) );
			    float VoH2 = VoH * VoH;
			    float tan2 = ( 1 - VoH2 ) / VoH2;
			    return (chi * 2) / ( 1 + sqrt( 1 + alpha * alpha * tan2 ) );
			}
			float D_GGX( float Roughness, float NoH)
			{
				float m = Roughness * Roughness;
				float m2 = m * m;
				float d = ( NoH * m2 - NoH ) * NoH + 1;	// 2 mad
				return m2 / ( d*d );//*LN;//dot(UnitL,N);					// 2 mul, 1 rcp
			}
			float G_Implicit() 
			{
				return 0.25;
			}
			// [Neumann et al. 1999, "Compact metallic reflectance models"]
			float G_Neumann( float NoV, float NoL )
			{
				return 1 / ( 4 * max( NoL, NoV ) );
			}

			// [Kelemen 2001, "A microfacet based coupled specular-matte brdf model with importance sampling"]
			float G_Kelemen( float3 L, float3 V )
			{
				return 1 / ( 2 + 2 * dot(L, V) );
			}

			// Tuned to match behavior of G_Smith
			// [Schlick 1994, "An Inexpensive BRDF Model for Physically-Based Rendering"]
			float G_Schlick( float Roughness, float NoV, float NoL )
			{
				float k = Square( Roughness ) * 0.5;
				float G_SchlickV = NoV * (1 - k) + k;
				float G_SchlickL = NoL * (1 - k) + k;
				return 0.25 / ( G_SchlickV * G_SchlickL );
			}

			// Smith term for GGX modified by Disney to be less "hot" for small roughness values
			// [Smith 1967, "Geometrical shadowing of a random rough surface"]
			// [Burley 2012, "Physically-Based Shading at Disney"]
			float G_Smith( float Roughness, float NoV, float NoL )
			{
				float a = Square( Roughness );
				float a2 = a*a;

				float G_SmithV = NoV + sqrt( NoV * (NoV - NoV * a2) + a2 );//+NL
				float G_SmithL = NoL + sqrt( NoL * (NoL - NoL * a2) + a2 );//+NV
				return 1.0f/( G_SmithV * G_SmithL );
			}
			float3 F_None( float3 SpecularColor )
			{
				return SpecularColor;
			}
			// [Schlick 1994, "An Inexpensive BRDF Model for Physically-Based Rendering"]
			// [Lagarde 2012, "Spherical Gaussian approximation for Blinn-Phong, Phong and Fresnel"]
			float3 F_Schlick( float3 SpecularColor, float VoH )
			{//high effective than original foumula
				// Anything less than 2% is physically impossible and is instead considered to be shadowing 
				return SpecularColor + (saturate( 50.0 * SpecularColor.g ) - SpecularColor ) * exp2( (-5.55473 * VoH - 6.98316) * VoH );//unreal 公式
				//SpecularColor is Fc
				//float Fc = exp2( (-5.55473 * VoH - 6.98316) * VoH );	// 1 mad, 1 mul, 1 exp
				//F_Schlick= Fc + (1 - Fc) * SpecularColor;					// 1 add, 3 mad
			}
	
			float F_Schlick2(float F0,float3 VH)
			{
                return  F0+(1-F0)*(pow(1.0 - VH,5.0));
			}
			float3 F_Fresnel( float3 SpecularColor, float VoH )
			{//这个公式消耗太高
				float3 SpecularColorSqrt = sqrt( clamp( float3(0, 0, 0), float3(0.99, 0.99, 0.99), SpecularColor ) );
				float3 n = ( 1 + SpecularColorSqrt ) / ( 1 - SpecularColorSqrt );
				float3 g = sqrt( n*n + VoH*VoH - 1 );
				return 0.5 * Square( (g - VoH) / (g + VoH) ) * ( 1 + Square( ((g+VoH)*VoH - 1) / ((g-VoH)*VoH + 1) ) );
			}
			half3 SimplePointLightSpecular( half3 SpecularColor,half inRoughness,float3 UnitL, float3 V, half3 N ,float4 tangent)
			{
				float Roughness = inRoughness;
				// TODO move outside tile loop
				Roughness = max( 0.08, Roughness );
				float3 H = normalize(V + UnitL);
				float NoH = saturate( dot(N, H) );
				float NoV = saturate( dot(N, V) );	
				float NoL = saturate( dot(N, UnitL) );	
				float VoH = saturate( dot(V, H) );	   			
				// Generalized microfacet specular
				//float D=D_GGXaniso(_RoughnessX, _RoughnessY,N,  H,  tangent,inRoughness);
				float  D =D_GGX( Roughness, NoH) / PI;//微平面分布函数 ，给定方向上的微平面的分数值
				float  G = G_Schlick(Roughness, NoV, NoL);
				//float  G = G_Implicit();//几何衰减系数G_Schlick(Roughness,NoV,NoL);//
				float3 F = F_Fresnel(SpecularColor, VoH);//
				//float3 F = F_None(SpecularColor);// F_Schlick( SpecularColor,VoH);//fresnel 反射系数，表示反射方向上的光强占原始光强的比率
				return (D * G) * F;// *dot(UnitL, N);//LN是ggx需要的,放在场景中让背面会变黑（物理正确），所以不加，让其背面亮一点

					//FGBufferData InGBufferData = ScreenSpaceData.GBuffer;
			}	
			void PBR(half inRoughness,half Metal, half3 UnitL, half3 V, half3 N ,inout half3 diff,inout half3 spec,float4 tangent)
			{ 	

				diff	=	SimplePointLightDiffuse(diff,inRoughness,Metal,UnitL,N);
				spec	=	SimplePointLightSpecular(spec,inRoughness,UnitL,V,N,tangent);

			}
		
			half3 SimplePointLightSpecularAniso( half3 SpecularColor,half inRoughness, float3 UnitL, float3 V, half3 N ,float4 tangent,float _RoughnessX,float _RoughnessY)
			{
				float Roughness = inRoughness;
				// TODO move outside tile loop
				Roughness = max( 0.08, Roughness );
				float3 H = normalize(V + UnitL);
				float NoH = saturate( dot(N, H) );
				float NoV = saturate( dot(N, V) );	
				float NoL = saturate( dot(N, UnitL) );	
				float VoH = saturate( dot(V, H) );	   			
				// Generalized microfacet specular
				float D =  D_GGXaniso(_RoughnessX, _RoughnessY, N, H, tangent, inRoughness);
				//float  D =D_GGX( Roughness, NoH) / PI;//微平面分布函数 ，给定方向上的微平面的分数值
				float  G = G_Implicit();//几何衰减系数G_Schlick(Roughness,NoV,NoL);//
				float3 F =F_None(SpecularColor);// F_Schlick( SpecularColor,VoH);//fresnel 反射系数，表示反射方向上的光强占原始光强的比率
				return (D * G) * F;// 

					//FGBufferData InGBufferData = ScreenSpaceData.GBuffer;
			}	
			void PBRAniso(half inRoughness, half3 UnitL, half3 V, half3 N ,inout half3 diff,inout half3 spec,float4 tangent,float _RoughnessX,float _RoughnessY)
			{ 	

				diff	=	SimplePointLightDiffuse(diff,inRoughness,UnitL,N);
				spec	=	SimplePointLightSpecularAniso(spec,inRoughness,UnitL,V,N,tangent,_RoughnessX,_RoughnessY);

			}half3 SimplePointLightSpecularLambert( half3 SpecularColor,half inRoughness, float3 UnitL, float3 V, half3 N ,float4 tangent)
			{
				float Roughness = inRoughness;
				// TODO move outside tile loop
				Roughness = max( 0.08, Roughness );
				float3 H = normalize(V + UnitL);
				float NoH = saturate( dot(N, H) );
				float NoV = saturate( dot(N, V) );	
				float NoL = saturate( dot(N, UnitL) );	
				float VoH = saturate( dot(V, H) );	   			
				// Generalized microfacet specular
				float  D = D_Blinn( Roughness, NoH) / PI;
				//float D =  D_GGXaniso(_RoughnessX, _RoughnessY, N, H, tangent, inRoughness);
				//float  D =D_GGX( Roughness, NoH) / PI;//微平面分布函数 ，给定方向上的微平面的分数值
				float  G = G_Implicit();//几何衰减系数G_Schlick(Roughness,NoV,NoL);//
				float3 F =F_None(SpecularColor);// F_Schlick( SpecularColor,VoH);//fresnel 反射系数，表示反射方向上的光强占原始光强的比率
				return (D * G) * F;// 

					//FGBufferData InGBufferData = ScreenSpaceData.GBuffer;
			}	
			void PBRLambert(half inRoughness, half3 UnitL, half3 V, half3 N ,inout half3 diff,inout half3 spec,float4 tangent)
			{ 	

				diff	=	SimplePointLightDiffuse(diff,inRoughness,UnitL,N);
				spec	=	SimplePointLightSpecularLambert(spec,inRoughness,UnitL,V,N,tangent);

			}





/////////////////////////
half2 EncodeNormal (half3 n)
{
	if(n.z<-0.999f)
    {
       return half2(0.5f,0.5f);
    }
    else
    {
       half2 enc = normalize(n.xy) * (sqrt(-n.z*0.5+0.5));
       return enc*0.5+0.5;
    }
}
half3 DecodeNormal (half2 enc)
{

	half4 nn = enc.xyxy*half4(2,2,0,0) + half4(-1,-1,1,-1);

	half l = dot(nn.xyz,-nn.xyw);

	nn.z = -l;

	nn.xy *= sqrt(l);

	return nn.xyz * 2 + half3(0,0,1);

}

float3 Sphere2Normal(float2 texCoord)
{
   float2 uv   =   (float2(2,1))*(texCoord+float2(0.5,0))*3.14159265;
   return   float3(cos(uv.x)*sin(uv.y),cos(uv.y),sin(uv.x)*sin(uv.y));
}
float2 Normal2Sphere(float3 n)
{
   return frac(float2(atan(n.z/n.x)*0.5,acos(n.y)) /3.14159265f +float2(n.x>0 ,0)*0.5);
}
float2 EncodeDepth(float depth)
{
	//float2 ret;
	//ret.x   =   floor(depth*255.0f)/255.0f;
	//ret.y   =   (depth-ret.x)*255.0f;
	//return ret;

	float2 kEncodeMul = float2(1.0, 255.0);
	float kEncodeBit = 1.0/255.0;
	float2 enc = kEncodeMul * depth;
	enc = frac (enc);
	enc.x -= enc.y * kEncodeBit;
	return enc;
}
float DecodeDepth(float2 depthxy)
{
	float2 kDecodeDot = float2(1.0, 1/255.0);
	return dot( depthxy, kDecodeDot );
	//return dot(depthxy.xy,float2(1.0f,0.003921568627451));
}


//////shadow


		float CalcLerp2X2(float2 uv, float4 dot_val)
			{
				float2 lerp_val = frac(uv*1024.0f);
				float2 temp = lerp(dot_val.xy, dot_val.zw, lerp_val.y);

				return lerp(temp.x, temp.y, lerp_val.x);
			}
			const static float2 kernel3x3[9] =
			{
				float2(-1,-1),
				float2(0,-1),
				float2(1,-1),

				float2(-1,0),
				float2(0,0),
				float2(1,0),

				float2(-1,1),
				float2(0,1),
				float2(1,1),
			};
			float CalcShadow3X3(float2 uv, float z, float2 XY_Depth, float3 invVP, sampler2D _ShadowDepth)
			{
				float _depth[9];
				for (int i = 0; i < 9; i++)
				{
					float2 temp = kernel3x3[i] * invVP.xyxy + uv.xyxy;
					float2 temp_depth = tex2D(_ShadowDepth, temp).xy;
					_depth[i] = dot(temp_depth, XY_Depth.xy) - z>0;
				}

				float ret = 0;
				ret += CalcLerp2X2(uv + kernel3x3[0] * invVP.xy, float4(_depth[0], _depth[1], _depth[3], _depth[4]));
				ret += CalcLerp2X2(uv + kernel3x3[1] * invVP.xy, float4(_depth[1], _depth[2], _depth[4], _depth[5]));
				ret += CalcLerp2X2(uv + kernel3x3[3] * invVP.xy, float4(_depth[3], _depth[4], _depth[6], _depth[7]));
				ret += CalcLerp2X2(uv + kernel3x3[4] * invVP.xy, float4(_depth[4], _depth[5], _depth[7], _depth[8]));
				return ret*0.25f;
			}

			float CalcShadow(float2 uv, float z, float2 XY_Depth, float3 invVP, sampler2D _ShadowDepth)
			{
				float origin_z = dot(tex2D(_ShadowDepth, uv).xy, XY_Depth);
				return origin_z>z;
			}
			float CalcShadow2(float2 uv, float z, float2 XY_Depth, float3 invVP, sampler2D _ShadowDepth)
			{
				float2 shadow_depth;
				shadow_depth.x = dot(tex2D(_ShadowDepth, uv).xy, XY_Depth);
				shadow_depth.y = dot(tex2D(_ShadowDepth, uv + float2(0, invVP.y)).xy, XY_Depth);
				shadow_depth -= z;
				shadow_depth = shadow_depth>0;
				float lerp_val = frac(uv.y / invVP.x);

				return lerp(shadow_depth.x, shadow_depth.y, lerp_val);
			}