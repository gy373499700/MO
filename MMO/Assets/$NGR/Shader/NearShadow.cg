#ifndef SHADOW_QUILITY
#define SHADOW_QUILITY 0
#endif

#ifndef AMBIENT_SPECULAR
#define AMBIENT_SPECULAR 1
#endif

#ifndef OUTPUT_SHADOW_ONLY
#define OUTPUT_SHADOW_ONLY 0
#endif

#include "UnityCG.cginc"
#include "LightCommon.cg"
#include "CalcShadow.cg"



sampler2D _Depth;
//float4 _Depth_ST;
sampler2D _Sample2x2;
sampler2D _ShadowDepth;
sampler2D _Random256;
samplerCUBE _EnvCube;


float4 farCorner;
struct v2f {
	float4 pos : SV_POSITION;
	float4 proj_pos : TEXCOORD0;
	float4 viewpos  : TEXCOORD1;
};


v2f vert(appdata_img v)
{
	v2f o;
	float4 pos = v.vertex;
#if SHADER_API_MOBILE
#if UNITY_UV_STARTS_AT_TOP
#else
	pos.z *= -1;
#endif
#else
#if UNITY_UV_STARTS_AT_TOP
	pos.z *= -1;
#endif
#endif
	o.pos = mul(UNITY_MATRIX_MVP, pos);
	o.proj_pos = o.pos;
	o.viewpos = o.pos;
#if UNITY_UV_STARTS_AT_TOP
	o.proj_pos.y *= -1;
#endif
	o.viewpos.w = o.proj_pos.w;

	float2 proj_uv = o.proj_pos.xy*0.5f+o.proj_pos.w*0.5f;
	o.proj_pos.zw = proj_uv.xy;
	return o;
}


float4 invViewport_Radius;
float4 mainInvViewport;
float4x4  mainView_shadowView;
float4x4  shadowProj;
float4 lightdir;
float4 lightcolor;
sampler2D _Diffuse;
float4 _AmbientColor;


float4 frag( v2f IN) : COLOR
{
	float4 proj_pos_uv = IN.proj_pos/IN.viewpos.w;

	float4 viewdir	=	float4(proj_pos_uv.xy,1,1)*farCorner;
	float2 proj_uv = proj_pos_uv.zw;
	

	float2 XY_Depth = float2(1.0f,0.003921568627451);
	
	float4 depth = tex2D(_Depth,proj_uv);
	float4 col = tex2D(_Diffuse, proj_uv);
	float view_depth = dot(depth.xy,XY_Depth);
	float3 normal = (DecodeNormal(depth.zw));
	
	
	float4 viewspace_pos = viewdir*view_depth;
	
	float4 shadowpos = mul(mainView_shadowView,float4(viewspace_pos.xyz+ normal*lightdir.w,1));

	float4 proj_pos = mul(shadowProj,shadowpos);
	proj_pos/=proj_pos.w;
	
	float2 shadowuv = proj_pos.xy*0.5f+0.5f;

#if SHADER_API_MOBILE
	#if UNITY_UV_STARTS_AT_TOP

	#else
			   shadowuv.y = 1 - shadowuv.y;
	#endif
#else
 #if UNITY_UV_STARTS_AT_TOP
			   shadowuv.y = 1-shadowuv.y;
 #endif
#endif

	XY_Depth *= invViewport_Radius.w;
	#if SHADOW_QUILITY == 0
		float4   rot   =  tex2D(_Sample2x2,proj_uv*0.25f/mainInvViewport.xy)*2-1;
		float2x2 rot_2x2 = float2x2( rot.xyzw);
		float occ = CalcShadowRotate(shadowuv, shadowpos.z, XY_Depth, invViewport_Radius.xyz, _ShadowDepth, rot_2x2);
		occ=occ*occ;
	#elif SHADOW_QUILITY == 1
		float occ = CalcShadow3X3(shadowuv, shadowpos.z, XY_Depth, invViewport_Radius.xyz, _ShadowDepth);
	#elif SHADOW_QUILITY == 2
		float occ = CalcShadow2x2(shadowuv, shadowpos.z, XY_Depth, invViewport_Radius.xyz, _ShadowDepth);
	#elif SHADOW_QUILITY == 3 
	    float occ = CalcShadow2(shadowuv, shadowpos.z, XY_Depth, invViewport_Radius.xyz, _ShadowDepth);
	#else
		float occ = 1;
	#endif

	#if OUTPUT_SHADOW_ONLY == 1
		return occ;
	#else
   float3 e = normalize(viewspace_pos);
   
   float3 diff = 1;
   float metal = col.w>=0.497f;
   float roughness = saturate(1-(col.w*2.0f)+metal);
   float3 origin_spec= (1 + metal * 3);
   float3 spec = origin_spec;
  
   PBR(roughness,-lightdir.xyz,-e,normal,diff, spec);
   float3 ambient_spec = 0;
   #if AMBIENT_SPECULAR == 1 
		float3 R = reflect(e,normal)*float3(1,1,-1); 
		R = mul(R,(float3x3)UNITY_MATRIX_V);
		float sqrt_roughness = (1-roughness);    
		float3 env = texCUBElod(_EnvCube,float4(R,(roughness)*5.0f)).xyz*sqrt_roughness*sqrt_roughness;
		ambient_spec = env*env*(metal+1);
   #endif
  return float4(occ*lightcolor.xyz*col.xyz*(diff + spec)+ambient_spec, 1); 
  #endif
}




