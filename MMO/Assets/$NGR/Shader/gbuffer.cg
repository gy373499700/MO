// Upgrade NOTE: replaced '_Object2World' with 'unity_ObjectToWorld'

#include "UnityCG.cginc"
#include "LightCommon.cg"
#include "grass.cg"


#ifndef ALPHA_TEST
#define ALPHA_TEST 0
#endif
#ifndef HAS_BUMP
#define HAS_BUMP 0
#endif
#ifndef ALPHA_TEST_BLACK
#define ALPHA_TEST_BLACK 0
#endif
#ifndef OIT
#define OIT 0
#endif
#ifndef NORMAL_UP
#define NORMAL_UP 0
#endif
#ifndef FORCE_FIELD
#define FORCE_FIELD 0
#endif
#ifndef SHADOW_DEPTH
#define SHADOW_DEPTH 0
#endif
#ifndef ALPHA_DisAppear
#define ALPHA_DisAppear 0
#endif
#ifndef HAIR_ON
#define HAIR_ON 0
#endif
#ifndef TREE_LEAF
#define TREE_LEAF 0
#endif

sampler2D	_MainTex;
float4		_MainTex_ST;
sampler2D	_SpecTex;
float4		_Color;
#if ALPHA_DisAppear == 1
float     _Disappear;
sampler2D	_NoiseTex;
float4	_DisappearColor;
#endif
#if HAS_BUMP == 1
float		_BumpScale;
#endif
#if OIT == 1
sampler2D	_OIT2X2Tex;
float4		_OITScreenParams;
#endif
float4		_AAOffset;
struct v2f{
	float4 pos 			: SV_POSITION;
	float4 uv 			: TEXCOORD0;
	float4 view_pos_nor	: TEXCOORD1;
	#if SHADOW_DEPTH == 0

	float4 tangent		: TEXCOORD2;

	#endif
	#if OIT==1
	float4 proj_pos		: TEXCOORD3;
	#endif
};

v2f gbuffer_vert(appdata_full v)
{
	v2f o;
	#if FORCE_FIELD == 1

	float rand =unity_ObjectToWorld[0].w * 100 + unity_ObjectToWorld[2].w + v.color.a;
	float3 p	=	 CalcPos(mul(unity_ObjectToWorld,v.vertex).xyz,v.color.a,rand);
	o.pos = mul(UNITY_MATRIX_VP,float4(p,1));
	#else
		#if TREE_LEAF == 1
			float4 localpos = float4(CalcLeafPos(v.vertex.xyz,v.normal.xyz),1);
			o.pos = mul(UNITY_MATRIX_MVP,localpos);
		#else
			o.pos = mul(UNITY_MATRIX_MVP,v.vertex);
		#endif
	#endif
	o.pos.xy += _AAOffset.xy*o.pos.w;
	o.uv.xy = TRANSFORM_TEX(v.texcoord,_MainTex);
	o.uv.zw	=	0;
	float4 view = mul(UNITY_MATRIX_MV,v.vertex);
	
	o.view_pos_nor.w	=	-view.z*_ProjectionParams.w;
	#if SHADOW_DEPTH == 2
	o.view_pos_nor	=	(view/view.w);
	#else
	#if NORMAL_UP == 1
	o.view_pos_nor.xyz	= normalize(mul((float3x3)UNITY_MATRIX_MV,float3(0,1,0)));
	#else
	o.view_pos_nor.xyz	=	normalize(mul(UNITY_MATRIX_MV,float4(v.normal,0)).xyz);
	#endif
	#endif
	#if SHADOW_DEPTH == 0

	o.tangent = float4((normalize(mul((float3x3)UNITY_MATRIX_MV,v.tangent.xyz))),v.tangent.w);

	#endif
	#if OIT==1
	o.proj_pos	=o.pos;
	#endif
	return o;
}

float4 gbuffer_frag(v2f i) : COLOR
{
	float4 ret;
	#if SHADOW_DEPTH == 2
	float4 temp_pos = i.view_pos_nor;
	float len = length(temp_pos.xyz)*_ProjectionParams.w;

	ret.xy = EncodeDepth((len));
	if(len>1)
	{
	ret.xy = half2(1,0);
	}
	ret.zw = 0;
	#elif SHADOW_DEPTH == 0
	ret.xy   =   EncodeDepth(i.view_pos_nor.w);
	#if HAS_BUMP == 1
		float3 binormal = normalize( i.tangent.w*cross((i.view_pos_nor.xyz),(i.tangent)));
		float3x3 rotmatrix =float3x3(i.tangent.xyz,binormal,i.view_pos_nor.xyz);
		float3 normal_spec = tex2D(_SpecTex,i.uv.xy).xyz;
		float3 normal = _BumpScale*(normal_spec*2-1);
		normal.z = sqrt(max(0,1-dot(normal.xy,normal.xy)));
		float3 ret_normal = mul(normal,rotmatrix);
		ret.zw	=	EncodeNormal(normalize(ret_normal));
	
	#else
		
		#if HAIR_ON == 1
		ret.zw =	EncodeNormal(normalize( i.tangent.w*cross((i.view_pos_nor.xyz),(i.tangent))));
		#else
		ret.zw =	EncodeNormal(normalize(i.view_pos_nor.xyz));

		#endif
	

	#endif
	#else
	ret.xy   =   EncodeDepth(i.view_pos_nor.w);
	ret.zw = ret.xy;
	#endif

	#if ALPHA_TEST == 1
		#if ALPHA_DisAppear == 1
		float4 noi = tex2D(_NoiseTex, i.uv);
		float v = _Disappear - noi.x;
		clip(v);
		if(abs(v)<0.05f)
		{	
			ret = ret*_DisappearColor;
		}
		#else
		float4 c = tex2D(_MainTex,i.uv.xy);
		clip(c.w*_Color.w-0.5f);
		#endif
	#elif  ALPHA_TEST_BLACK == 1
	float4 c = tex2D(_MainTex,i.uv.xy);
	clip(dot(c.xyz,1)-0.01f);
	#elif OIT == 1
	float4 c = tex2D(_MainTex,i.uv.xy);
	float2 projuv = i.proj_pos.xy/i.proj_pos.w;
	projuv= projuv*0.5+0.5;
	float clip_val =  tex2D(_OIT2X2Tex,projuv/2/_OITScreenParams.xy);
	clip(c.w-clip_val);
	#endif
	
	return ret;
}

