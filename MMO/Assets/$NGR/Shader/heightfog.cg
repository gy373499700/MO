#include "UnityCG.cginc"
 
#ifndef USE_Dynamic_Fog
#define USE_Dynamic_Fog 0
#endif 
			sampler2D	_MainTex;
			sampler2D	_Depth;
			float4		farCorner;
			float4		_ViewUp;
			float4		invViewport_Radius;
			float4		FogColor;
			float4		FogDistance;
			sampler2D	_Noice;
			float _Speed;
			float4x4 ViewToWorld;
			struct v2f {
				float4 pos : SV_POSITION;
				float2 uv : TEXCOORD0;
				float4 viewpos:TEXCOORD1;
			};
			#define MATH_PI 3.14159265f
			float2 DirectionToUV(float3 dir)
			{//将方向转换为球面图的uv，而非普通图，跟reflect 采样cubemap意思差不多
				float2 uv = float2(atan(dir.z / dir.x) * 0.5f, acos(dir.y)) / MATH_PI + float2(dir.x>0, 0)*0.5;
				uv.x -= floor(uv.x);
				uv.y = 1 - uv.y;
				return uv;
			}
			v2f vert (appdata_img v)
			{
				v2f o;
				//o.pos = mul (UNITY_MATRIX_MVP, v.vertex);
				//o.uv = v.texcoord;
				//o.corner = float4(v.texcoord*2-1,1,1)*farCorner;
#if SHADER_API_GLES|| SHADER_API_GLES3
				//Mobile
				o.pos = float4(v.vertex.x * 2, v.vertex.y * 2, 1, 1);
				o.uv = o.pos*0.5f + 0.5f;
				o.viewpos = float4(o.pos.xy, 1.0f, 1)*farCorner;
#else
				//Editor Only 
				o.pos = float4(v.vertex.x * 2, v.vertex.y * 2, 1, 1);
				o.uv = o.pos*0.5f + 0.5f;
				o.uv.y = 1 - o.uv.y;
				o.viewpos = float4(o.pos.xy, 1.0f, 1)*farCorner;
				o.viewpos.y *= -1;
#endif
				return o;
			}
			float4 frag( v2f IN) : COLOR
			{
			   float2 halfPixel   =   0.5f*invViewport_Radius.xy;
			   float2   uv=   IN.uv+halfPixel;

			   float4 depth_normal = tex2D(_Depth,IN.uv);
			   float2 XY_Depth	=	float2(1.0f,0.003921568627451);
			   float depth = dot(XY_Depth,depth_normal.xy);
			   float3 pos = IN.viewpos*depth;
			   float3 dir = normalize(pos);
			   float maxLength = length(pos);
			   
			   float noise=0;
			   #if USE_Dynamic_Fog
					float speed = _Time.y*_Speed;
					float3 wdir=mul((float3x3)ViewToWorld,dir);
					float4 nc = tex2D(_Noice, DirectionToUV(wdir)*20+float2(speed, 0));
				    noise = (nc.r - 0.5)*FogDistance.w;
			   #endif
				float fdot = dot(dir,_ViewUp.xyz);
				float len = abs(_ViewUp.w/fdot);//Fog_Height
				
				if(_ViewUp.w<=0)
				{//相机在雾上
						if(fdot<0)
						{
							maxLength =maxLength-len;
						}
						else
						{
							maxLength=0;
						}
				}
				else if(fdot>0 && maxLength > len)
				{
					maxLength = len;
				}
				
			   
			   
			   float val = pow(saturate((maxLength-FogDistance.x)/(FogDistance.y-FogDistance.x)), FogDistance.z);
			   val = val*val;

			   float4 color = FogColor;//lerp(tex2D(_MainTex,uv),AmbientColor,val);
			   color.w = val*(noise + 1);
			   return color;
			}